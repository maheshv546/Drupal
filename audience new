<?php

declare(strict_types=1);

namespace Drupal\Tests\voya_standard\Functional;

use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\Tests\BrowserTestBase;
use Voya\Drupal\Tests\VoyaTestTrait;
use Drupal\redirect\Entity\Redirect;

/**
 * Functional test for redirect functionality in voya_standard.
 *
 * @group voya_standard
 */
class RedirectTest extends BrowserTestBase {

  use VoyaTestTrait;

  /**
   * {@inheritdoc}
   */
  protected static $modules = [
    'voya_standard',
    'redirect',
    'node',
  ];

  /**
   * Test nodes.
   *
   * @var \Drupal\node\NodeInterface[]
   */
  protected array $nodes = [];

  /**
   * Creates nodes for test cases.
   */
  protected function setUp(): void {
    parent::setUp();

    $this->nodes['n1'] = $this->drupalCreateNode([
      'type' => 'article',
      'title' => 'Article test 1',
      'status' => NodeInterface::PUBLISHED,
      'moderation_state' => 'published',
      'field_post_date' => '2021-12-31T12:00:00',
    ]);

    $this->nodes['n2'] = $this->drupalCreateNode([
      'type' => 'article',
      'title' => 'Article test 2',
      'status' => NodeInterface::PUBLISHED,
      'moderation_state' => 'published',
      'field_post_date' => '2022-03-31T12:00:00',
    ]);

    $this->nodes['n3'] = $this->drupalCreateNode([
      'type' => 'article',
      'title' => 'Article test 3',
      'status' => NodeInterface::PUBLISHED,
      'moderation_state' => 'published',
      'field_post_date' => '2020-08-31T12:00:00',
    ]);
  }

  /**
   * Provides redirect test cases.
   *
   * @return array[]
   *   Redirect test case sets.
   */
  public function redirectProvider(): array {
    return [
      // From â†’ To.
      ['/article/article-test-1', '/article/article-test-2', 'Article test 2'],
      ['/article/article-test-2', '/article/article-test-3', 'Article test 3'],
    ];
  }

  /**
   * Tests redirects using a data provider.
   *
   * @dataProvider redirectProvider
   */
  public function testCheckRedirect(string $from, string $to, string $expectedTitle): void {
    // Disable automatic redirect following so we can inspect headers.
    $this->getSession()->getDriver()->getClient()->followRedirects(FALSE);

    // Create redirect entity.
    Redirect::create([
      'redirect_source' => ['path' => $from],
      'redirect_redirect' => ['uri' => 'internal:' . $to],
      'language' => 'en',
      'status_code' => 301,
    ])->save();

    // Visit the redirect source URL.
    $this->getSession()->visit(Url::fromUserInput($from)->toString());

    // Assert the response code is 301.
    $this->assertSame(301, $this->getSession()->getStatusCode());

    // Assert the redirect location matches the target URL.
    $this->assertSame(
      $to,
      parse_url($this->getSession()->getResponseHeader('Location'), PHP_URL_PATH)
    );

    // Now re-enable redirect following.
    $this->getSession()->getDriver()->getClient()->followRedirects(TRUE);

    // Visit the original URL again, this time follow the redirect.
    $this->drupalGet($from);

    // Assert the final loaded page contains the expected node title.
    $this->assertSession()->pageTextContains($expectedTitle);
  }

}