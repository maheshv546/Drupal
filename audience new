hi default_terms:
  audience:
    - Individuals
    - Employers
    - Financial Professionals
    - Voya Financial Advisors
    - Institutional Investors
  line_of_business:
    - Retirement
    - Employee Benefits
    - Investment Management


public function testMultipleVocabularyTermUpdate() {
  // Install the module properly.
  \Drupal::service('module_installer')->install(['your_module']);

  // Manually set the config override for the test environment.
  $configFactory = \Drupal::service('config.factory')->getEditable('your_module.default_terms');
  $configFactory->set('default_terms', [
    'audience' => [
      'Individuals',
      'Employers',
      'Financial Professionals',
      'Voya Financial Advisors',
      'Institutional Investors',
    ],
    'line_of_business' => [
      'Retirement',
      'Employee Benefits',
      'Investment Management',
    ],
  ])->save();

  // Clear config cache.
  \Drupal::service('cache.config')->deleteAll();

  // Rebuild the container.
  \Drupal::service('kernel')->rebuildContainer();
  drupal_static_reset();

  // Run the update hook.
  \Drupal::service('module_handler')->invoke('your_module', 'update_9001');

  // Define expected terms per vocabulary.
  $expected_terms = [
    'audience' => [
      'Individuals',
      'Employers',
      'Financial Professionals',
      'Voya Financial Advisors',
      'Institutional Investors',
    ],
    'line_of_business' => [
      'Retirement',
      'Employee Benefits',
      'Investment Management',
    ],
  ];

  foreach ($expected_terms as $vocabulary => $terms_list) {
    // Fetch terms from the database.
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties(['vid' => $vocabulary]);

    $this->assertNotEmpty($terms, "Terms exist in vocabulary '{$vocabulary}'.");

    // Extract term names.
    $actual_terms = array_map(fn($t) => $t->getName(), $terms);

    // Ensure all expected terms are present.
    foreach ($terms_list as $term_name) {
      $this->assertTrue(in_array($term_name, $actual_terms), "Term '{$term_name}' exists in '{$vocabulary}'.");
    }

    // Ensure no unexpected terms exist.
    $this->assertCount(count($terms_list), $terms, "Only expected terms exist in '{$vocabulary}'.");
  }
}


default_terms:
  type: mapping
  label: 'Default Terms'
  mapping:
    audience:
      type: mapping
      label: 'Audience'
      mapping:
        term_1:
          type: string
          label: 'Term 1'
        term_2:
          type: string
          label: 'Term 2'
        term_3:
          type: string
          label: 'Term 3'
        term_4:
          type: string
          label: 'Term 4'
        term_5:
          type: string
          label: 'Term 5'
    line_of_business:
      type: mapping
      label: 'Line of Business'
      mapping:
        term_1:
          type: string
          label: 'Term 1'
        term_2:
          type: string
          label: 'Term 2'
        term_3:
          type: string
          label: 'Term 3'


voya_content.settings:
  type: config_object
  label: 'Voya Content Settings'
  mapping:
    default_terms:
      type: mapping
      label: 'Default Terms'
      mapping:
        audience:
          type: mapping
          label: 'Audience'
          mapping:
            term_1:
              type: string
              label: 'Audience Term 1'
            term_2:
              type: string
              label: 'Audience Term 2'
            term_3:
              type: string
              label: 'Audience Term 3'
            term_4:
              type: string
              label: 'Audience Term 4'
            term_5:
              type: string
              label: 'Audience Term 5'
        line_of_business:
          type: mapping
          label: 'Line of Business'
          mapping:
            term_1:
              type: string
              label: 'Line of Business Term 1'
            term_2:
              type: string
              label: 'Line of Business Term 2'
            term_3:
              type: string
              label: 'Line of Business Term 3'

/**
 * Update audience taxonomy terms from settings.php override, replacing them based on weight.
 */
function my_module_update_9001() {
  $config_factory = \Drupal::configFactory();
  $config_name = 'my_module.default_terms';

  // Fetch overridden config (settings.php overrides take priority).
  $terms_config = $config_factory->get($config_name);

  if (!$terms_config) {
    \Drupal::logger('my_module')->warning('No configuration found for my_module.default_terms.');
    return;
  }

  foreach ($terms_config->get() as $vocabulary => $new_terms) {
    $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

    // Load existing terms by weight.
    $existing_terms = $storage->loadByProperties(['vid' => $vocabulary]);
    $existing_terms_by_weight = [];

    foreach ($existing_terms as $term) {
      $existing_terms_by_weight[$term->getWeight()] = $term;
    }

    // Track terms that should remain.
    $terms_to_keep = [];
    $weight = 0;

    foreach ($new_terms as $term_name) {
      if (isset($existing_terms_by_weight[$weight])) {
        // Update existing term with the same weight.
        $existing_term = $existing_terms_by_weight[$weight];
        $existing_term->setName($term_name);
        $existing_term->save();
        $terms_to_keep[] = $existing_term->id();
      } else {
        // Create a new term if no matching weight exists.
        $new_term = $storage->create([
          'vid' => $vocabulary,
          'name' => $term_name,
          'weight' => $weight,
        ]);
        $new_term->save();
        $terms_to_keep[] = $new_term->id();
      }
      $weight++;
    }

    // Remove terms that are no longer in the list.
    foreach ($existing_terms as $term) {
      if (!in_array($term->id(), $terms_to_keep)) {
        $term->delete();
      }
    }
  }

  \Drupal::logger('my_module')->notice('Updated audience taxonomy terms based on weight from settings.php override.');
}

<?php

namespace Drupal\Tests\your_module\Kernel;

use Drupal\KernelTests\KernelTestBase;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\Entity\Term;

/**
 * Tests the order of Business Line taxonomy terms.
 *
 * @group your_module
 */
class BusinessLineTermOrderTest extends KernelTestBase {

  /**
   * {@inheritdoc}
   */
  protected static $modules = [
    'taxonomy',
    'your_module',
    'system',
  ];

  /**
   * The vocabulary ID for business lines.
   */
  protected const VOCABULARY_ID = 'business_line';

  /**
   * Set up environment.
   */
  protected function setUp(): void {
    parent::setUp();
    $this->installEntitySchema('taxonomy_term');
    $this->installEntitySchema('user');
    $this->installSchema('taxonomy', ['taxonomy_term_data']);
    
    // Create the Business Line vocabulary.
    Vocabulary::create([
      'vid' => self::VOCABULARY_ID,
      'name' => 'Business Line',
    ])->save();

    // Create taxonomy terms with different weights.
    $this->createTerm('Finance', 2);
    $this->createTerm('Technology', 1);
    $this->createTerm('Healthcare', 3);
  }

  /**
   * Creates a taxonomy term.
   *
   * @param string $name
   *   The name of the term.
   * @param int $weight
   *   The weight of the term.
   */
  protected function createTerm(string $name, int $weight): void {
    Term::create([
      'vid' => self::VOCABULARY_ID,
      'name' => $name,
      'weight' => $weight,
    ])->save();
  }

  /**
   * Tests that Business Line terms are ordered by weight.
   */
  public function testBusinessLineTermsOrder(): void {
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties(['vid' => self::VOCABULARY_ID]);

    // Sort terms by weight.
    usort($terms, fn($a, $b) => $a->getWeight() <=> $b->getWeight());

    // Extract term names in expected order.
    $actual_order = array_map(fn($term) => $term->getName(), $terms);

    // Expected order based on weight.
    $expected_order = ['Technology', 'Finance', 'Healthcare'];

    $this->assertEquals($expected_order, $actual_order, 'The Business Line terms are sorted correctly by weight.');
  }

}

function site_abaretirement_config_override(&$config, $context) {
  if ($context == 'voya_content.settings') {
    \Drupal::logger('site_abaretirement')->notice('Config override applied.');
    $config['default_terms']['audience'] = ['New Overridden Term 1', 'New Overridden Term 2'];
  }
}
