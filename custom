/**
 * Implements hook_preprocess_fullcalendar_event().
 *
 * Adds event taxonomy terms and their classes to the calendar event render array.
 */
function mymodule_preprocess_fullcalendar_event(array &$variables): void {
  /** @var \Drupal\node\NodeInterface $event */
  $event = $variables['entity'];

  // Ensure it's an event node.
  if ($event->bundle() !== 'event') {
    return;
  }

  // Get the event taxonomy terms and classes.
  $terms = $event->hasField('field_event_category') && !$event->get('field_event_category')->isEmpty()
    ? $event->get('field_event_category')->referencedEntities()
    : [];

  // Generate term labels and corresponding CSS classes.
  $term_labels = [];
  foreach ($terms as $term) {
    $tid = $term->id();
    $term_name = $term->getName();
    $css_class = "taxonomy-term-" . $tid . "-" . strtolower(str_replace(' ', '-', $term_name));

    // Store the term label with its associated class.
    $term_labels[] = [
      'label' => $term_name,
      'class' => $css_class,
    ];
  }

  // Pass the formatted terms to the calendar template.
  $variables['event_terms'] = $term_labels;
}

<div class="calendar-event">
  <h3 class="calendar-event-title">{{ title }}</h3>

  <div class="calendar-event-meta">
    <span class="event-label">Events:</span>

    <span class="event-taxonomy">
      {% for term in event_terms %}
        <span class="event-term {{ term.class }}">{{ term.label }}</span>
      {% endfor %}
    </span>
  </div>
</div>

.calendar-event-meta {
  display: flex;
  align-items: center;
  gap: 10px;
}

.event-label {
  font-weight: bold;
}

.event-taxonomy {
  display: flex;
  gap: 5px;
}

.event-term {
  padding: 2px 6px;
  border-radius: 3px;
  background-color: #f3f3f3;
  font-size: 12px;
}
/**
 * Implements hook_preprocess_views_view().
 *
 * Overrides the FullCalendar view to add taxonomy terms with classes.
 */
function mymodule_preprocess_views_view(array &$variables): void {
  // Check if this is the correct view and display.
  if ($variables['view']->id() === 'fullcalendar_events' && $variables['display_id'] === 'block_1') {
    foreach ($variables['rows'] as &$row) {
      // Get the node entity from the view row.
      if (!isset($row['#row']->_entity) || !$row['#row']->_entity instanceof \Drupal\node\NodeInterface) {
        continue;
      }

      $event = $row['#row']->_entity;

      // Get the taxonomy terms and generate CSS classes.
      $terms = $event->hasField('field_event_category') && !$event->get('field_event_category')->isEmpty()
        ? $event->get('field_event_category')->referencedEntities()
        : [];

      $term_labels = [];
      foreach ($terms as $term) {
        $tid = $term->id();
        $term_name = strtolower(str_replace(' ', '-', $term->getName()));
        $css_class = "taxonomy-term-" . $tid . "-" . $term_name;
        
        $term_labels[] = [
          'label' => $term->getName(),
          'class' => $css_class,
        ];
      }

      // Add term labels and classes to the row variables.
      $row['#event_terms'] = $term_labels;
    }
  }
}


/**
 * Implements template_preprocess_views_view().
 */
function mymodule_preprocess_views_view(array &$variables): void {
  // Ensure we are targeting the FullCalendar view and correct display.
  if ($variables['view']->id() === 'fullcalendar' && $variables['view']->current_display === 'block_1') {

    foreach ($variables['rows'] as &$row) {
      // Ensure we have a node entity.
      if (!isset($row->_entity) || !$row->_entity instanceof \Drupal\node\NodeInterface) {
        continue;
      }

      $node = $row->_entity;
      $terms = [];
      
      // Check if the node has taxonomy field 'field_event_category'.
      if ($node->hasField('field_event_category') && !$node->get('field_event_category')->isEmpty()) {
        foreach ($node->get('field_event_category')->referencedEntities() as $term) {
          $tid = $term->id();
          $term_name = $term->getName();
          $css_class = "taxonomy-term-" . $tid . "-" . strtolower(str_replace(' ', '-', $term_name));

          // Store term name and class.
          $terms[] = [
            'label' => $term_name,
            'class' => $css_class,
          ];
        }
      }

      // Pass the formatted taxonomy terms to the template.
      $row->event_terms = $terms;
    }
  }
}
.taxonomy-term-1-workshop { background-color: #ffcc00; }
.taxonomy-term-2-webinar { background-color: #0099ff; }
.taxonomy-term-3-conference { background-color: #66cc66; }