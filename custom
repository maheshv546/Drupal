<?php

namespace Drupal\custom_taxonomy_block\Plugin\Block;

use Drupal\Core\Block\BlockBase;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;

/**
 * Provides a 'Taxonomy Terms' Block.
 *
 * @Block(
 *   id = "taxonomy_terms_block",
 *   admin_label = @Translation("Taxonomy Terms Block"),
 * )
 */
class TaxonomyTermsBlock extends BlockBase implements ContainerFactoryPluginInterface {

  /**
   * The entity type manager.
   *
   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
   */
  protected $entityTypeManager;

  /**
   * Constructs a new TaxonomyTermsBlock.
   *
   * @param array $configuration
   *   A configuration array containing information about the plugin instance.
   * @param string $plugin_id
   *   The plugin ID for the block.
   * @param mixed $plugin_definition
   *   The plugin implementation definition.
   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
   *   The entity type manager.
   */
  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
    $this->entityTypeManager = $entity_type_manager;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
      $container->get('entity_type.manager')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function build() {
    $vocabulary = 'your_vocabulary_machine_name'; // Change this to your vocabulary machine name.
    $terms = $this->entityTypeManager->getStorage('taxonomy_term')->loadByProperties(['vid' => $vocabulary]);
    
    $term_list = [];
    $index = 0;

    foreach ($terms as $term) {
      $term_list[] = [
        'name' => $term->getName(),
        'class' => 'term-class-' . $index,
      ];
      $index++;
    }

    return [
      '#theme' => 'taxonomy_terms_block',
      '#terms' => $term_list,
      '#attached' => [
        'library' => ['custom_taxonomy_block/styles'],
      ],
    ];
  }
}