namespace Drupal\my_module\Service;

use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Entity\EntityTypeManagerInterface;

class TaxonomyConfigService {

  protected ConfigFactoryInterface $configFactory;
  protected EntityTypeManagerInterface $entityTypeManager;

  public function __construct(ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager) {
    $this->configFactory = $configFactory;
    $this->entityTypeManager = $entityTypeManager;
  }

  /**
   * Stores taxonomy terms as configuration and replaces old ones.
   *
   * @param string $vocabulary
   *   The vocabulary machine name.
   * @param array $terms
   *   An array of terms ['term_id' => 'Term Name'].
   */
  public function updateTaxonomyConfig(string $vocabulary, array $terms): void {
    $config = $this->configFactory->getEditable("my_module.taxonomy.{$vocabulary}");
    $config->set('terms', $terms)->save();

    // Delete all existing terms in the vocabulary.
    $storage = $this->entityTypeManager->getStorage('taxonomy_term');
    $existing_terms = $storage->loadByProperties(['vid' => $vocabulary]);

    foreach ($existing_terms as $term) {
      $term->delete();
    }

    // Create new terms.
    foreach ($terms as $id => $name) {
      $new_term = Term::create([
        'vid' => $vocabulary,
        'name' => $name,
      ]);
      $new_term->save();
    }
  }

  /**
   * Retrieves taxonomy terms from configuration.
   *
   * @param string $vocabulary
   *   The vocabulary machine name.
   *
   * @return array
   *   An array of stored terms.
   */
  public function getTaxonomyConfig(string $vocabulary): array {
    return $this->configFactory->get("my_module.taxonomy.{$vocabulary}")->get('terms') ?? [];
  }
}

use Drupal::service;

/**
 * Implements hook_update_N().
 */
function my_module_update_9001() {
  $taxonomy_service = service('my_module.taxonomy_config_service');

  // Define new taxonomy terms.
  $new_terms = [
    1 => 'Term One',
    2 => 'Term Two',
    3 => 'Term Three',
  ];

  // Update configuration and replace existing terms.
  $taxonomy_service->updateTaxonomyConfig('my_vocabulary', $new_terms);
}

my_module.taxonomy.*:
  type: mapping
  label: "Taxonomy Terms Configuration"
  mapping:
    terms:
      type: sequence
      label: "Terms"
      sequence:
        type: mapping
        mapping:
          term_id:
            type: string
            label: "Term ID"
          term_name:
            type: string
            label: "Term Name"



namespace Drupal\Tests\my_module\Functional;

use Drupal\taxonomy\Entity\Term;
use Drupal\Tests\BrowserTestBase;

/**
 * Tests the taxonomy update hook and verifies taxonomy terms exist.
 *
 * @group my_module
 */
class TaxonomyUpdateTest extends BrowserTestBase {

  /**
   * The modules to enable.
   *
   * @var array
   */
  protected static $modules = ['my_module', 'taxonomy'];

  /**
   * Tests if the taxonomy update hook creates the expected terms.
   */
  public function testTaxonomyUpdate() {
    // Run update hook.
    $this->container->get('module_handler')->invoke('my_module', 'update_9001');

    // Load terms from the database.
    $terms = Term::loadMultiple();
    $this->assertNotEmpty($terms, 'Taxonomy terms exist in the database.');

    // Check if specific terms exist by their names.
    $expected_terms = ['Term One', 'Term Two', 'Term Three'];
    $found_terms = [];

    foreach ($terms as $term) {
      $found_terms[] = $term->label();
    }

    // Ensure all expected terms are in the database.
    foreach ($expected_terms as $expected) {
      $this->assertContains($expected, $found_terms, "Found expected term: $expected");
    }

    // Verify the vocabulary.
    foreach ($terms as $term) {
      $this->assertEquals('my_vocabulary', $term->bundle(), 'Term belongs to the correct vocabulary.');
    }
  }
}

my_module.taxonomy.*:
  type: mapping
  label: "Taxonomy Terms Configuration"
  mapping:
    terms:
      type: mapping
      label: "Terms"
      mapping:
        "*":
          type: string
          label: "Term Name"

